import os.path

def glob_func_test():
	"""The function to see how Glob function works.
		
		Grab all cpp file in the same directory and print them.
		:rtype: int
	"""
	print ("\nStart printing all cpp files in this folder\n---")
	# result : print all cpp files in the same folder with Sconstruct
	for item in Glob("*.cpp"):
		print(item)
	print("---\nDONE\n")
	return 0

def get_error_collection():
	"""The error collections.

		You never use this func because this is the error collections to keep in mind.
		If you run this function, you will get error message from scons
		because hello.cpp has no main function.
	
		:rtype: int
	"""
	print ("\nYou called get_error_collection method.\n")
	print("Example 1:\n")	
	# This result gets error because there is no main function in hello.cpp
	# You need main function for compiling cpp files.
	app_hello = env.Program(target='hello', source=["hello.cpp"])


	print("Example 2:\n")
	# Because this file made by python, SCons treats all input as lists of files.
	common_sources = ['main.cpp', 'hello.cpp']
	# This generates a python error.
	Program('program1', common_sources + 'goodbye.cpp')

	#The following works correctly. You add two lists together to make another list.
	Program('program2', common_sources + ['goodbye.cpp'])


	return 0


def print_all_children(all_apps):
	"""The function to see all return value from Program() method.
		
		:rtype: int
	"""
	# Print all children item inside all_app
	print ("\nStart printing the children in all_apps\n---")
	for item in all_apps:
		for child in item.all_children():
			print (child)
	print("---\nDONE.\n")
	# result : Print [/bin/g++] and all object file for example :hello.o.  

	return 0


def tips_collection():
	"""The tips collection. You can use for Sconstruct.
		
		:rtype: int
	"""
	
	"""
	#Example 1: Split function
	AllowSubstExceptions
		To make long lists of file names easier to deal with, SCons provides a Split function that takes a quoted list of file names, with the names separated by spaces or other white-space characters, and turns it into a list of separate file names.
		(From the official documentation: "Chapter 3 :3.5. Making Lists of Files Easier to Read")
	"""
	src_files = Split('main.cpp hello.cpp goodbye.cpp')
	print ("\nsrc_files is :",src_files,"\n")
	env.Program('split_etest_1', src_files)

	return 0

def create_Library():
	"""The refference how to create library.
		
		:rtype: int
	"""
	
	cpp_files = Split('hello.cpp goodbye.cpp')

	# Building Libraries from source code or object files.
	Library('_my_lib', Glob('*.h')+cpp_files)
	
	# Building Static Libraries.
	StaticLibrary('_my_static_lib', Glob('*.h')+cpp_files)

	# Building Shared Libraries.(DLL:Dynamic Linking Library) 
	SharedLibrary('_my_dll', Glob('*.cpp'))
	
	return 0

def decider_test():
	"""The refference about decider function in SCons.
		
		:rtype: int
	"""
	#Decider function.
	Decider('MD5')

	"""
	# 'MD5-timestamp' can significantly speed up many up-to-date builds.
	# Note that the drawback (the demerit) of using 'MD5-timestamp' is that 
	# SCons will not rebuild a target file if a source file was modified 
	# within one second of the time SCons build the file. Especially, you sould be 
	# more cautious when you use build script or continuous integration tools, which
	# rely on the ability to apply changes to files automatically and then rebuild 
	# as quickly as possible.
	"""
	Decider('MD5-timestamp')

	# This is the same as make. And you can also use Decider('make') as the same way.
	Decider('timestamp-newer')
	
	# "timestamp-newer" does't work when the source file is older than the target file. 
	# Thus you will prefer "timestamp-match" in a normal situation. 
	Decider('timestamp-match')

	return 0

def print_env(env):
	"""Printing items inside Environment.
		
		:rtype: int
	"""

	# Printing the specific item.
	print("CC is ",env['CC'])

	for item in sorted(env.Dictionary().items()):
		print ("construction variable = '%s', value = '%s'" %item)
		
	return 0


def multi_construction_env_test():
	"""Using multi construction environments test.
		
		:rtype: int
	"""
	opt = Environment(CCFLAGS = '-O2')
	dbg = Environment(CCFLAGS = '-g')

	
	opt_obj = opt.Object('foo-opt', 'hello.cpp')
	opt.Program(opt_obj)

	dbg_obj = dbg.Object('foo-dbg', 'hello.cpp')
	dbg.Program(dbg_obj)
	
	"""
	# You can replace existing construction variable values using the Replace method
	# This is just an example on SCons docs.
	# Note that because SCons function and method calls are order-independent, 
	# the last replacement "wins" and is used to build all targets. 
	#env.Replace(CCFLAGS = '-DDEFINE2')
	
	# Also you have append function.
	# Note that when you append the new value to the old value, if both are strings, the previous and new strings # are simply concatenated.
	#env.Append(CCFLAGS = ['-DLAST'])
	# If the construction variable doesn't already exist, you can use AppendUnique.
	#env.AppendUnique(CCFLAGS=['-g'])
	# PrependUnique is useful to add a new and unique value to the beginning of a construction variable.
	#env.PrependUnique(CCFLAGS=['-g']
	"""

	return 0

def progress_func_test():
	"""Progress function test.

		SCons can take a long time making absolutely sure that every target is,
		then progress function help to prevent that users mistakenly conclude that 
		
		SCons is hung or that there is some other problem with the build.
		Of course, normally you don't want to add all of these additional lines to 
		your build output, as that can make it difficult for the user to find errors.

		A more useful way too display this progress might be to have the file names
		printed directly to the user's screen, and the actual way is on the SCons docs,
		"9.3. Providing Build Progress Output: the Progress Function."
		:rtype: int
	"""
	
	# You need \n because progress func does not make a newline automatically.
	Progress('Evaluating $TARGET\n')

	return 0


# This function gets Name Error which tells 'CPPFLAGS' is not defined'.
#AllowSubstExceptions()

# This function allows these error: IndexError ,NameError, and ZeroDivisionError.
AllowSubstExceptions(IndexError,NameError,ZeroDivisionError)



env = Environment(CPPPATH = '.')
# DefaultEnvironment is faster way but I need to learn more about what arguments should I set.
# This is just an example on the SCons docs.
#env = DefaultEnvironment(tools = ['gcc', 'gnulink'],CC = '/usr/local/bin/gcc') 


lib_list = Library('_my_lib', Glob('*[!hello]*.h'))
# you will use all cpp files except for "hello.cpp"
my_program_files = Glob('*[!hello]*.cpp')


all_apps = env.Program('my_program', my_program_files)

#print("\nname:", all_apps[0],"\n")


print("\nPrinting Node's file name test.\n")
lib_names = []
name = str("")
for l_name in all_apps :
	name = str(l_name)
	if not os.path.exists(name):
		print(name,"does not exist!\n")
	else : 
		print("name :",name,"\n")
		lib_names.append(name)

decider_test()

progress_func_test()

# Show cccom which is the command line used to compile a C source file to a (static) object file.
# The result example, "CCCOM is: gcc -o -c -I."
print ("CCCOM is:", env.subst('$CCCOM'),"\n")


# Multi construction environments test.
#multi_construction_env_test()

# This is test function to see how glob function works.
#glob_func_test()

# This is the function that show all children of the object variable.
#print_all_children(all_apps)

# This is the function that shows tips learned through the SCons docs.
#tips_collection()

# This is the function to print items inside env
#print_env(env)